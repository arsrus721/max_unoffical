import json
import threading
import time
from websocket import create_connection, WebSocketConnectionClosedException

class ChatClient:
    def __init__(self, url, token, watch_chats=None, user_agent=None):
        self.url = url
        self.token = token
        self.watch_chats = watch_chats or []
        self.user_agent = user_agent or "PythonWebSocketClient/1.0"
        self.ws = None
        self.seq = 0
        self.running = False

    def connect(self):
        headers = [
            ("Origin", "https://web.max.ru"),
            ("User-Agent", self.user_agent)
        ]
        self.ws = create_connection(self.url, header=[f"{h[0]}: {h[1]}" for h in headers])
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.running = True
        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å handshake
        self.send_handshake()

    def send_handshake(self):
        self.seq += 1
        payload = {
            "ver": 11,
            "cmd": 0,
            "seq": self.seq,
            "opcode": 19,
            "payload": {
                "interactive": True,
                "token": self.token,
                "chatsCount": len(self.watch_chats),
                "chatsSync": 0,
                "contactsSync": 0,
                "presenceSync": 0,
                "draftsSync": 0
            }
        }
        self.send(payload)

    def subscribe_chat(self, chat_id):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.seq += 1
        payload = {"ver": 11, "cmd": 0, "seq": self.seq, "opcode": 65, "payload": {"chatId": chat_id, "type": "TEXT"}}
        self.send(payload)
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç ID {chat_id}")

    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        self.seq += 1
        payload = {
            "ver": 11,
            "cmd": 0,
            "seq": self.seq,
            "opcode": 64,
            "payload": {
                "chatId": chat_id,
                "message": {
                    "text": text,
                    "cid": int(time.time()*1000),
                    "elements": [],
                    "attaches": []
                },
                "notify": True
            }
        }
        self.send(payload)
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {text}")

    def send(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ JSON payload"""
        if self.ws:
            self.ws.send(json.dumps(data))

    def receive_loop(self, callback):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while self.running:
                try:
                    message = self.ws.recv()
                except WebSocketConnectionClosedException:
                    print("‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç —Å–µ—Ä–≤–µ—Ä–æ–º")
                    break
                except Exception as e:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue

                if not message:
                    continue

                data = json.loads(message)
                callback(data)

        finally:
            self.ws.close()

    def start_keepalive(self, interval=30):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ping/pong –∫–∞–∂–¥—ã–µ interval —Å–µ–∫—É–Ω–¥"""
        def keepalive():
            while self.running:
                self.seq += 1
                ping_payload = {"ver": 11, "cmd": 0, "seq": self.seq, "opcode": 1, "payload": {"interactive": False}}
                try:
                    self.send(ping_payload)
                except:
                    break
                time.sleep(interval)
        threading.Thread(target=keepalive, daemon=True).start()

    def stop(self):
        self.running = False
        if self.ws:
            self.ws.close()
